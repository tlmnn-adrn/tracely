
Url
===

Attribute
---------

urlPatterns
...........

*Typ:          Array*

*Sichtbarkeit: Protected*

*Static:       Ja*

Hier werden alle registrierten Urls gespeichert.

url
...

*Typ:          Array*

*Sichtbarkeit: Protected*

*Static:       Nein*

Die aufgerufene Url geteilt nach den /.

controller
..........

*Typ:          String*

*Sichtbarkeit: Protected*

*Static:       Nein*

Der aufzurufende Controller.

name
.....

*Typ:          String*

*Sichtbarkeit: Protected*

*Static:       Nein*

Der Name unter der die Seite intern gefnuden werden kann.

arguments
.........

*Typ:          Array*

*Sichtbarkeit: Protected*

*Static:       Nein*

Hier werden in der Url übergebene Argumente gespeichert.

Methoden
--------

add
...

Parameter
~~~~~~~~~

*$name: String* - Der Name, den die neue Seite haben soll.

*$arguments: String* - Weitere Parameter, die einfach übergeben werden.

Funktion
~~~~~~~~

Erstellt eine neue Instanz der Klasse Url (oder der von Url erbenden Klasse) und speichert sie in *$urlPatterns*.

Code
~~~~

.. code-block:: php

    public static function add($name, ...$arguments){

        self::$urlPatterns[$name] = new static(...$arguments);

    }

find
....

Parameter
~~~~~~~~~

*$name: String* - Der Name der gesuchten Seite.

*$arguments: String* - Die Argumente, mit denen die Seite aufgerufen werden soll.

Funktion
~~~~~~~~

Findet die Seite mit dem angegebenen Namen und returnt die dazugehörige Url Klasse.

Code
~~~~

.. code-block:: php

    public static function find($name, ...$arguments){

        if(array_key_exists($name, self::$urlPatterns)){
            return self::$urlPatterns[$name]->getUrl($arguments);
        }

    }

match
.....

Parameter
~~~~~~~~~

*$url: String* - Die aufgerugene Url.

Funktion
~~~~~~~~

Überprüft alle registrierten Urls, ob sie mit der angegebenen übereinstimmen. Gibt es eine Übereinstimmung, wird der dazu gehörige Controller mit den in der Url
angegebenen Argumenten als Attribut returnt.

Code
~~~~

.. code-block:: php

    public static function match($url){

        foreach(self::$urlPatterns as $urlPattern){

            $arguments = $urlPattern->matches($url);

            if(is_array($arguments)){
                $urlPattern->setArgs($arguments);
                return $urlPattern;
            }
        }

        return FALSE;

    }

__construct
...........

Parameter
~~~~~~~~~

*$url: String* - Die Url der neuen Seite.

*$controller: String* - Der Controller, den die neue Seite aufruft.

Code
~~~~

.. code-block:: php

    public function __construct($url, protected $controller){

        $this->url = $this->parseUrl($url);

    }


parseUrl
........

Parameter
~~~~~~~~~

*$url: String* - Die Url, die geteilt werden soll.

Funktion
~~~~~~~~

Zerteilt die Url nach '/'. Entfernt illegale Zeichen aus der Url.
Aus 'test/3' wird ['test', '3']

Code
~~~~

.. code-block:: php

    protected function parseUrl($url){
        $short = rtrim($url, '/');
        $filtered = filter_var($short, FILTER_SANITIZE_URL);
        $exploded = explode('/', $filtered);

        return $exploded;
    }

matches
.......

Parameter
~~~~~~~~~

*$url: String* - Die Url, die mit der gespeicherten verglichen werden soll.

Funktion
~~~~~~~~

Überprüft, ob die angegebene Url mit der gespeicherten übereinstimmt.

.. hint:: Hat man die Url test/<id> registriert und ruft test/3 auf, stimmen die Urls überein.
          Es wird dann die Seite aufgerufen mit dem Argument ["id"=>"3"]

Code
~~~~

.. code-block:: php

    public function matches($url){

        $arguments = [];

        $len = count($this->url);

        if($len != count($url)){
            return FALSE;
        }

        for($i=0; $i<$len; $i++){

            if($this->url[$i] != $url[$i]){

                if($this->isArg($this->url[$i])){
                    $arguments[trim($this->url[$i], '<>')] = $url[$i];
                }else{
                    return FALSE;
                }
            }
        }

        $this->arguments = $arguments;

        return $arguments;
    }

setArgs
.......

Parameter
~~~~~~~~~

*$arguments: Array* - Die Argumente

Code
~~~~

.. code-block:: php

    public function setArgs($arguments){
        $this->arguments = $arguments;
    }

callController
..............

Funktion
~~~~~~~~

Ruft den Controller der Seite mit den in der Url übergebenen Argumenten auf.

Code
~~~~

.. code-block:: php

    public function callController(){
        return new $this->controller($this->arguments);
    }

isArg
.....

Parameter
~~~~~~~~~

*$element: String* - Das Element der Url, von dem überprüft werden soll, ein Argument ist

Funktion
~~~~~~~~

Überprüft, ob es sich um ein Argument-Platzhalter handelt. Also auf das Format <*>

Code
~~~~

.. code-block:: php

    protected function isArg($element){
        if(strlen($element) >= 1 && $element[0] == '<' && $element[-1] == '>'){
            return TRUE;
        }
        return FALSE;
    }

getUrl
......

Parameter
~~~~~~~~~

*$arguments([]): Array* - Die Arguemente, mit denen die neue Url aufgerufen werden soll

Funktion
~~~~~~~~

Returnt die Url der Seite.

Code
~~~~

.. code-block:: php

    public function getUrl($arguments=[]){

        $path = "http://".$_SERVER['HTTP_HOST']."/";
        $argument_counter = 0;

        foreach($this->url as $element){
            if($this->isArg($element) && array_key_exists($argument_counter, $arguments)){
                $path .= $arguments[$argument_counter];
                $argument_counter++;
            }else{
                $path .= $element.'/';
            }
        }

        $path = rtrim($path, '/');

        return $path;
    }

